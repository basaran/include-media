////
/// include-media public exposed API
/// @author Eduardo Boucas
/// @access public
////

///
/// Generates a media query based on a list of conditions
///
/// @param {Arglist}   $conditions  - Media query conditions
///
/// @example scss - With a single set breakpoint
///  @include media('>phone') { }
///
/// @example scss - With two set breakpoints
///  @include media('>phone', '<=tablet') { }
///
/// @example scss - With custom values
///  @include media('>=358px', '<850px') { }
///
/// @example scss - With set breakpoints with custom values
///  @include media('>desktop', '<=1350px') { }
///
/// @example scss - With a static expression
///  @include media('retina2x') { }
///
/// @example scss - Mixing everything
///  @include media('>=350px', '<tablet', 'retina3x') { }
///
@mixin media($conditions...) {
  @if ($im-media-support and list.length($conditions)==0) or (not $im-media-support and im-intercepts-static-breakpoint($conditions...)) {
    @content;
  }

  @else if ($im-media-support and list.length($conditions) > 0) {
    @media #{string.unquote(parse-expression(list.nth($conditions, 1)))} {
      // Recursive call
      $sliced-conditions: slice($conditions, 2);

      @include media($sliced-conditions...) {
        @content;
      }
    }
  }
}

/// @example scss - Mixing everything
///  @include media('container-block' '>=350px', '<tablet', 'retina3x') { }

@mixin container($conditions...) {
  @if ($im-media-support and list.length($conditions)==0) or (not $im-media-support and im-intercepts-static-breakpoint($conditions...)) {
    @content;
  }

  @else if ($im-media-support and list.length($conditions) > 0) {
    @container #{string.unquote(list.nth($conditions, 1))} #{string.unquote(parse-expression(list.nth($conditions, 2)))} {
      // Recursive call
      $sliced-conditions: slice($conditions, 3);

      @if (list.length($sliced-conditions) > 0) {
        @include container(list.nth($conditions, 1), $sliced-conditions...) {
          @content;
        }
      }
    }
  }
}


/// @example scss - Mixing everything
/// @include container('>=350px', '<tablet', 'retina3x') { }
/// 
/// or the first argument can be the named container
/// @include container(':named-container', '>=350px', '<tablet', 'retina3x') { }
///  
@mixin container($conditions...) {
  @if ($im-media-support and list.length($conditions)==0) {
    @content;
  }

  @else if (not $im-media-support and im-intercepts-static-breakpoint($conditions...)) {
    @content;
  }

  @else if ($im-media-support and list.length($conditions) > 0) {
    $first-condition: list.nth($conditions, 1);
    $first-character: string.slice($first-condition, 1, 1);
    $container-name: "" !default;

    @if ($first-character ==':') {
      $container-name : str-slice($first-condition, 2, -1);
    }

    @if ($container-name =="") {
      @container #{string.unquote(parse-expression($first-condition))} {
        $actual_conditions: slice($conditions, 2);

        @include container($actual_conditions...) {
          @content;
        }
      }
    }

    @else {
      @container #{string.unquote($container-name)} #{string.unquote(parse-expression(list.nth($conditions, 2)))} {
        $actual_conditions: slice($conditions, 3);

        @if (list.length($actual_conditions) > 0) {
          @include container($first-condition, $actual_conditions...) {
            @content;
          }
        }

        @else {
          @content;
        }
      }
    }
  }
}